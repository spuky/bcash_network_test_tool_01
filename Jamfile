
import modules ;
import os ;

ECHO "OS =" [ os.name ] ;

BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;

if [ os.name ] = MACOSX
{
	BOOST_ROOT = ./deps/boost ;
}
else if [ os.name ] = NT
{
	BOOST_ROOT = ./deps/boost ;
}
else if [ os.name ] = LINUX
{
	BOOST_ROOT = ./deps/boost ;
}
else
{
	if ! $(BOOST_ROOT)
	{
		BOOST_ROOT = ./deps/boost ;
	}
}

ECHO "BOOST_ROOT =" $(BOOST_ROOT) ;

if $(BOOST_ROOT)
{
	use-project /boost : $(BOOST_ROOT) ;
}

SOURCES =
    account
	accounting_entry
	address
	address_manager
	base58
	big_number
    blake256
	block
	block_index
	block_index_disk
    block_locator
    block_merkle
	checkpoints
    configuration
	crypter
	db
	db_env
	db_tx
    db_tx_bdb
	db_tx_ldb
	db_wallet
	file
	filesystem
    gateway
    globals
	hash
    hd_configuration
    hd_ecdsa
    hd_keychain
	http_transport
	inventory_vector
	key
	key_pool
	key_public
    key_reserved
	key_store_basic
	key_store_crypto
	key_wallet
	key_wallet_master
    merkle_tree_partial
	message
    mining
	mining_manager
    nat_pmp
    nat_pmp_client
	point_in
	point_out
	reward
	ripemd160
    rpc_connection
    rpc_json_parser
    rpc_manager
    rpc_server
    rpc_transport
	script
    script_checker
    script_checker_queue
	secret
	sha256
	signature_cache
	stack
	stack_impl
    status_manager
	tcp_acceptor
	tcp_connection
	tcp_connection_manager
	tcp_transport
	transaction
    transaction_bloom_filter
	transaction_in
	transaction_index
	transaction_merkle
	transaction_out
	transaction_pool
	transaction_position
	transaction_wallet
    upnp_client
	utility
    version_bits
	wallet
	wallet_manager
;

local usage-requirements = 
	<include>./include
	<include>./coin/include
	<include>./deps
    <toolset>gcc:<include>$(BOOST_ROOT)
	<toolset>clang-darwin:<include>$(BOOST_ROOT)
	<toolset>darwin:<include>$(BOOST_ROOT)
	<toolset>msvc:<include>$(BOOST_ROOT)

	<toolset>gcc:<include>./deps/openssl/include
	<toolset>clang-darwin:<include>./deps/openssl/include
	<toolset>darwin:<include>./deps/openssl/include
	<toolset>msvc:<include>./deps/openssl/include

	<toolset>gcc:<include>./deps/db/include
	<toolset>clang-darwin:<include>./deps/db/include
	<toolset>darwin:<include>./deps/db/include
	<toolset>msvc:<include>./deps/db/include

	<toolset>gcc:<include>./deps/leveldb/leveldb/include
	<toolset>clang-darwin:<include>./deps/leveldb/leveldb/include
	<toolset>darwin:<include>./deps/leveldb/leveldb/include
	<toolset>msvc:<include>./deps/leveldb/leveldb/include

	<toolset>msvc,<variant>debug:<include>$(BOOST_ROOT)/build/debug/include
	<toolset>msvc,<variant>release:<include>$(BOOST_ROOT)/build/release/include
	<variant>release:<define>NDEBUG
	<define>_FILE_OFFSET_BITS=64
	<toolset>clang-darwin:<define>BOOST_NO_CXX11_NUMERIC_LIMITS
	<toolset>msvc:<define>_WIN32_WINNT=0x0501
	<toolset>msvc:<define>_UNICODE
	<toolset>msvc:<define>UNICODE
	<toolset>msvc:<cxxflags>/Zc:wchar_t
	<toolset>msvc:<cxxflags>/Zc:forScope
	<toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
	<toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
	<toolset>msvc:<define>_WIN32_WINNT=0x0501
	<toolset>msvc:<define>BOOST_ALL_NO_LIB=1
	<toolset>msvc,<variant>release:<linkflags>/OPT:ICF=5
	<toolset>msvc,<variant>release:<linkflags>/OPT:REF
;

project coin ;

lib coin

	: # sources
	src/$(SOURCES).cpp

	: # requirements
	<threading>multi
	$(usage-requirements)

	: # default build
	<link>static

	: # usage requirements
	$(usage-requirements)
	;

